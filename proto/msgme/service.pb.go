// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/msgme/service.proto

/*
Package msgme is a generated protocol buffer package.

It is generated from these files:
	proto/msgme/service.proto

It has these top-level messages:
	Message
	SendResponse
	ListenRequest
*/
package msgme

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	From    string                     `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Content string                     `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	SentAt  *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=sent_at,json=sentAt" json:"sent_at,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetSentAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.SentAt
	}
	return nil
}

type SendResponse struct {
	Code        int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SendResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Placeholder for future filtering
type ListenRequest struct {
}

func (m *ListenRequest) Reset()                    { *m = ListenRequest{} }
func (m *ListenRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()               {}
func (*ListenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Message)(nil), "msgme.Message")
	proto.RegisterType((*SendResponse)(nil), "msgme.SendResponse")
	proto.RegisterType((*ListenRequest)(nil), "msgme.ListenRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MsgMe service

type MsgMeClient interface {
	Send(ctx context.Context, in *Message, opts ...client.CallOption) (*SendResponse, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...client.CallOption) (MsgMe_ListenClient, error)
}

type msgMeClient struct {
	c           client.Client
	serviceName string
}

func NewMsgMeClient(serviceName string, c client.Client) MsgMeClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "msgme"
	}
	return &msgMeClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *msgMeClient) Send(ctx context.Context, in *Message, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.serviceName, "MsgMe.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgMeClient) Listen(ctx context.Context, in *ListenRequest, opts ...client.CallOption) (MsgMe_ListenClient, error) {
	req := c.c.NewRequest(c.serviceName, "MsgMe.Listen", &ListenRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &msgMeListenClient{stream}, nil
}

type MsgMe_ListenClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Message, error)
}

type msgMeListenClient struct {
	stream client.Streamer
}

func (x *msgMeListenClient) Close() error {
	return x.stream.Close()
}

func (x *msgMeListenClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *msgMeListenClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *msgMeListenClient) Recv() (*Message, error) {
	m := new(Message)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MsgMe service

type MsgMeHandler interface {
	Send(context.Context, *Message, *SendResponse) error
	Listen(context.Context, *ListenRequest, MsgMe_ListenStream) error
}

func RegisterMsgMeHandler(s server.Server, hdlr MsgMeHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&MsgMe{hdlr}, opts...))
}

type MsgMe struct {
	MsgMeHandler
}

func (h *MsgMe) Send(ctx context.Context, in *Message, out *SendResponse) error {
	return h.MsgMeHandler.Send(ctx, in, out)
}

func (h *MsgMe) Listen(ctx context.Context, stream server.Streamer) error {
	m := new(ListenRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MsgMeHandler.Listen(ctx, m, &msgMeListenStream{stream})
}

type MsgMe_ListenStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
}

type msgMeListenStream struct {
	stream server.Streamer
}

func (x *msgMeListenStream) Close() error {
	return x.stream.Close()
}

func (x *msgMeListenStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *msgMeListenStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *msgMeListenStream) Send(m *Message) error {
	return x.stream.Send(m)
}

func init() { proto.RegisterFile("proto/msgme/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x4f, 0x6b, 0xb3, 0x40,
	0x10, 0xc6, 0xf1, 0x7d, 0xa3, 0xd2, 0x49, 0xff, 0xc0, 0xb6, 0x07, 0xeb, 0xa5, 0xe2, 0x29, 0x50,
	0x58, 0x43, 0xf2, 0x09, 0x0a, 0x3d, 0xd6, 0x8b, 0xed, 0xbd, 0x18, 0x1d, 0x65, 0x21, 0xbb, 0x6b,
	0x9d, 0x49, 0x3f, 0x7f, 0xc9, 0xa8, 0xd0, 0xf4, 0x36, 0xf3, 0x9b, 0xe1, 0xf9, 0xf1, 0xc0, 0xe3,
	0x30, 0x7a, 0xf6, 0x85, 0xa5, 0xde, 0x62, 0x41, 0x38, 0x7e, 0x9b, 0x06, 0xb5, 0x30, 0x15, 0x0a,
	0x4c, 0x9f, 0x7a, 0xef, 0xfb, 0x23, 0x16, 0x02, 0x0f, 0xa7, 0xae, 0x60, 0x63, 0x91, 0xb8, 0xb6,
	0xc3, 0xf4, 0x97, 0x1f, 0x21, 0x2e, 0x91, 0xa8, 0xee, 0x51, 0x29, 0x58, 0x75, 0xa3, 0xb7, 0x49,
	0x90, 0x05, 0x9b, 0xab, 0x4a, 0x66, 0x95, 0x40, 0xdc, 0x78, 0xc7, 0xe8, 0x38, 0xf9, 0x27, 0x78,
	0x59, 0xd5, 0x1e, 0x62, 0x42, 0xc7, 0x9f, 0x35, 0x27, 0xff, 0xb3, 0x60, 0xb3, 0xde, 0xa5, 0x7a,
	0x72, 0xe9, 0xc5, 0xa5, 0x3f, 0x16, 0x57, 0x15, 0x9d, 0x5f, 0x5f, 0x38, 0x7f, 0x85, 0xeb, 0x77,
	0x74, 0x6d, 0x85, 0x34, 0x78, 0x47, 0xa2, 0x6c, 0x7c, 0x8b, 0xa2, 0x0c, 0x2b, 0x99, 0x55, 0x06,
	0xeb, 0x16, 0xa9, 0x19, 0xcd, 0xc0, 0xc6, 0xbb, 0x59, 0xfb, 0x1b, 0xe5, 0x77, 0x70, 0xf3, 0x66,
	0x88, 0xd1, 0x55, 0xf8, 0x75, 0x42, 0xe2, 0x5d, 0x07, 0x61, 0x49, 0x7d, 0x89, 0xea, 0x19, 0x56,
	0xe7, 0x7c, 0x75, 0xab, 0xa5, 0xbe, 0x9e, 0xab, 0xa5, 0xf7, 0xf3, 0x7e, 0x21, 0xdf, 0x42, 0x34,
	0xc5, 0xa8, 0x87, 0xf9, 0x7c, 0x91, 0x9a, 0xfe, 0x09, 0xd9, 0x06, 0x87, 0x48, 0xaa, 0xed, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xab, 0x37, 0x5a, 0xa4, 0x78, 0x01, 0x00, 0x00,
}
